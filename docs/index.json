{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | TimeSeriesAnalysis reference documentation",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/TimeSeriesAnalysis.Array2D.html": {
    "href": "api/TimeSeriesAnalysis.Array2D.html",
    "title": "Class Array2D | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Array2D Non-generic 2D-array methods Inheritance System.Object Array2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class Array2D Methods GetColumnParsedAsDateTime(String[,], Int32, String) Parses a column of strings in an array/matrix of strings Declaration public static DateTime[] GetColumnParsedAsDateTime(this string[, ] matrix, int columnNumber, string dateFormat) Parameters Type Name Description System.String [,] matrix a 2D-aray of strings System.Int32 columnNumber the index of the column to parse System.String dateFormat the DateTime dateformat,For the format of dateFormat, see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings Returns Type Description System.DateTime []"
  },
  "api/TimeSeriesAnalysis.Array2D-1.html": {
    "href": "api/TimeSeriesAnalysis.Array2D-1.html",
    "title": "Class Array2D<T> | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Array2D<T> Generic array operations that can be done on arrays of any type, for operators specific to numerical arrays(matrices) see Matrix.cs Inheritance System.Object Array2D<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public class Array2D<T> Type Parameters Name Description T Methods Convert2DtoJagged(T[,]) converts a 2d array into a jagged array Declaration public static T[][] Convert2DtoJagged(T[, ] matrix) Parameters Type Name Description T[,] matrix Returns Type Description T[][] GetColumn(T[,], Int32) returns the column of the matrix with the given index Declaration public static T[] GetColumn(T[, ] matrix, int columnNumber) Parameters Type Name Description T[,] matrix System.Int32 columnNumber Returns Type Description T[] GetColumns(T[,], Int32[]) returns all the columns correspoding to columnNumbers in a 2d-array Declaration public static T[, ] GetColumns(T[, ] matrix, int[] columnNumbers) Parameters Type Name Description T[,] matrix System.Int32 [] columnNumbers Returns Type Description T[,] GetRow(T[,], Int32) returns the row of the matrix with the given index as an vector Declaration public static T[] GetRow(T[, ] matrix, int rowNumber) Parameters Type Name Description T[,] matrix System.Int32 rowNumber Returns Type Description T[] Transpose(T[,]) transposes a 2d-array (rows are turned into columns and vice versa) Declaration public static T[, ] Transpose(T[, ] matrix) Parameters Type Name Description T[,] matrix Returns Type Description T[,]"
  },
  "api/TimeSeriesAnalysis.Array2DExtensionMethods.html": {
    "href": "api/TimeSeriesAnalysis.Array2DExtensionMethods.html",
    "title": "Class Array2DExtensionMethods | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Array2DExtensionMethods Extension methods based on Array2D Inheritance System.Object Array2DExtensionMethods Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class Array2DExtensionMethods Methods Convert2DtoJagged(Double[,]) Converts a 2d-array to a jagged array Declaration public static double[][] Convert2DtoJagged(this double[, ] matrix) Parameters Type Name Description System.Double [,] matrix Returns Type Description System.Double [][] GetColumn(Double[,], Int32) returns the column of a 2d-array of doubles corresponding to columnIndex(starts at zero) Declaration public static double[] GetColumn(this double[, ] matrix, int columnNumber) Parameters Type Name Description System.Double [,] matrix System.Int32 columnNumber Returns Type Description System.Double [] GetColumn(String[,], Int32) returns the column of a 2d-array of strings corresponding to columnIndex(starts at zero) Declaration public static string[] GetColumn(this string[, ] matrix, int columnIndex) Parameters Type Name Description System.String [,] matrix System.Int32 columnIndex Returns Type Description System.String [] GetColumnParsedAsDateTime(String[,], Int32, String) Parses a column in a 2d-array and returns the results as a vector of date-times. Declaration public static DateTime[] GetColumnParsedAsDateTime(this string[, ] matrix, int columnNumber, string dateFormat) Parameters Type Name Description System.String [,] matrix System.Int32 columnNumber System.String dateFormat Returns Type Description System.DateTime [] GetColumns(Double[,], Int32[]) Returns the columns corresponding to columnNumbers as a 2d-array Declaration public static double[, ] GetColumns(this double[, ] matrix, int[] columnNumbers) Parameters Type Name Description System.Double [,] matrix System.Int32 [] columnNumbers Returns Type Description System.Double [,] GetNColumns(Double[,]) Return the number of columns of a 2d-matrix Declaration public static int GetNColumns(this double[, ] matrix) Parameters Type Name Description System.Double [,] matrix Returns Type Description System.Int32 GetNRows(Double[,]) Return the number of rows of a 2d-matrix Declaration public static int GetNRows(this double[, ] matrix) Parameters Type Name Description System.Double [,] matrix Returns Type Description System.Int32 GetRow(Double[,], Int32) returns the row of a 2d-array of doubles corresponding to columnIndex(starts at zero) Declaration public static double[] GetRow(this double[, ] matrix, int rowNumber) Parameters Type Name Description System.Double [,] matrix System.Int32 rowNumber Returns Type Description System.Double [] GetRow(String[,], Int32) returns the row of a 2d-array of strings corresponding to columnIndex(starts at zero) Declaration public static string[] GetRow(this string[, ] matrix, int rowNumber) Parameters Type Name Description System.String [,] matrix System.Int32 rowNumber Returns Type Description System.String [] GetRowsAfterIndex(DateTime[], Int32) Returns rows starting with rowIndex and onwards Declaration public static DateTime[] GetRowsAfterIndex(this DateTime[] array, int rowIndex) Parameters Type Name Description System.DateTime [] array System.Int32 rowIndex Returns Type Description System.DateTime [] GetRowsAfterIndex(Double[], Int32) Returns rows starting with rowIndex and onwards Declaration public static double[] GetRowsAfterIndex(this double[] array, int rowIndex) Parameters Type Name Description System.Double [] array System.Int32 rowIndex Returns Type Description System.Double [] GetRowsAfterIndex(Double[,], Int32) Returns rows starting with rowIndex and onwards Declaration public static double[, ] GetRowsAfterIndex(this double[, ] array, int rowIndex) Parameters Type Name Description System.Double [,] array System.Int32 rowIndex Returns Type Description System.Double [,] Transpose(Double[,]) Transposes a 2d-matrix. Declaration public static double[, ] Transpose(this double[, ] matrix) Parameters Type Name Description System.Double [,] matrix Returns Type Description System.Double [,] WriteColumn(Double[,], Int32, Double[]) overwrites the columin in matrix with the new column newColumnValues Declaration public static double[, ] WriteColumn(this double[, ] matrix, int colIdx, double[] newColumnValues) Parameters Type Name Description System.Double [,] matrix System.Int32 colIdx System.Double [] newColumnValues Returns Type Description System.Double [,]"
  },
  "api/TimeSeriesAnalysis.html": {
    "href": "api/TimeSeriesAnalysis.html",
    "title": "Namespace TimeSeriesAnalysis | TimeSeriesAnalysis reference documentation",
    "keywords": "Namespace TimeSeriesAnalysis Classes Array2D Non-generic 2D-array methods Array2D<T> Generic array operations that can be done on arrays of any type, for operators specific to numerical arrays(matrices) see Matrix.cs Array2DExtensionMethods Extension methods based on Array2D Matrix Operations for treating 2D-arrays as mathetmatical matrices Vec Vec<T> Class for generic methods on any type T that treat arrays as vectors(sorting,slicing,concatenating). For mathematical methods on vectors of doubles and integers, look into non-generic sister class \"Vec\". VecExtensionMethods Utility functions and operations for treating arrays as mathetmatical vectors Enums VectorFindValueType VectorSortType"
  },
  "api/TimeSeriesAnalysis.Matrix.html": {
    "href": "api/TimeSeriesAnalysis.Matrix.html",
    "title": "Class Matrix | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Matrix Operations for treating 2D-arrays as mathetmatical matrices Inheritance System.Object Matrix Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class Matrix Methods AppendRow(Double[,], Double[]) Appends another row onto an existing matrix. Returns null if this was not possible(ie. dimnesions dont agree). Declaration public static double[, ] AppendRow(double[, ] matrix, double[] newRowVec) Parameters Type Name Description System.Double [,] matrix System.Double [] newRowVec Returns Type Description System.Double [,] ComponentMult(Double[,], Double[], Int32) Multipliy either entire matrix or single row(optional third input) by a vector (returns a matrix) Declaration public static double[, ] ComponentMult(double[, ] matrix, double[] vector, int singleMatrixRowToMult = -1) Parameters Type Name Description System.Double [,] matrix System.Double [] vector System.Int32 singleMatrixRowToMult Returns Type Description System.Double [,] Mult(Double[,], Double, Int32) Multipliy either entire matrix or single row(optional third input) by a scalar Declaration public static double[, ] Mult(double[, ] matrix, double scalar, int singleMatrixRowToMult = -1) Parameters Type Name Description System.Double [,] matrix System.Double scalar System.Int32 singleMatrixRowToMult Returns Type Description System.Double [,] Mult(Double[,], Double[]) Multipliy either entire matrix or single row(optional third input) by a vector (returns vector) Declaration public static double[] Mult(double[, ] matrix, double[] vector) Parameters Type Name Description System.Double [,] matrix System.Double [] vector Returns Type Description System.Double [] ReplaceColumn(Double[,], Int32, Double[]) Replace a single column of a matrix Declaration public static double[, ] ReplaceColumn(double[, ] matrix, int colIndex, double[] newColVec) Parameters Type Name Description System.Double [,] matrix System.Int32 colIndex System.Double [] newColVec Returns Type Description System.Double [,] ReplaceRow(Double[,], Int32, Double[]) Replace a single row of a matrix Declaration public static double[, ] ReplaceRow(double[, ] matrix, int rowIndex, double[] newRowVec) Parameters Type Name Description System.Double [,] matrix System.Int32 rowIndex System.Double [] newRowVec Returns Type Description System.Double [,]"
  },
  "api/TimeSeriesAnalysis.Utility.CSV.html": {
    "href": "api/TimeSeriesAnalysis.Utility.CSV.html",
    "title": "Class CSV | TimeSeriesAnalysis reference documentation",
    "keywords": "Class CSV IO Utility class for loading time-series data from a plain text comma-separated variable(CSV) file Inheritance System.Object CSV Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class CSV Methods LoadDataFromCSV(String, out Double[,], out String[], out String[,]) Load time-series data from a CSV-file into variables for further processing Declaration public static bool LoadDataFromCSV(string filename, out double[, ] doubleData, out string[] variableNames, out string[, ] stringData) Parameters Type Name Description System.String filename path of file to be loaded System.Double [,] doubleData (output) the returned 2D array where each column is the data for one variable System.String [] variableNames (output) an array of the variable names in doubleData System.String [,] stringData (output)the raw data of the entire csv-file in a 2D array, only needed if parsing of other two variables has failed, and useful for retireving timestamps Returns Type Description System.Boolean RobustParseDouble(String, out Double) Loading string data into a double value. Declaration public static bool RobustParseDouble(string str, out double value) Parameters Type Name Description System.String str the string to be parsed System.Double value (output) is the value of the parsed double(if successfully parsed) Returns Type Description System.Boolean The method returns true if succesful, otherwise it returns false."
  },
  "api/TimeSeriesAnalysis.Utility.html": {
    "href": "api/TimeSeriesAnalysis.Utility.html",
    "title": "Namespace TimeSeriesAnalysis.Utility | TimeSeriesAnalysis reference documentation",
    "keywords": "Namespace TimeSeriesAnalysis.Utility Classes CSV IO Utility class for loading time-series data from a plain text comma-separated variable(CSV) file LowPass Numerical low-pass filtering of time-series MovingAvg Moving-average filter of time-series ParserFeedback Plot Static methods for plotting one or more time-series across one or more y-axes and one or more subplots. If you sometimes need to disable plots (for instance if plotting code is included in unit tests) see Plot4Test Plot4Test Version of Plot class where plots code can be Enabled()/Disabled() programatically. This allows you to keep all your \"Plot\" calls in your unit tests and turn them on as needed to debug a single test, while avoid being overwhelmed with plots if for instance re-running all unit tests. SignificantDigits Utility class to round double variables to a given nubmer of signficant digits. StringToFileWriter IO Utility class to write to file. UnixTime Utility class to work with unix time stamps Structs ParserFeedbackLogLine Enums ParserfeedbackMessageLevel"
  },
  "api/TimeSeriesAnalysis.Utility.LowPass.html": {
    "href": "api/TimeSeriesAnalysis.Utility.LowPass.html",
    "title": "Class LowPass | TimeSeriesAnalysis reference documentation",
    "keywords": "Class LowPass Numerical low-pass filtering of time-series Inheritance System.Object LowPass Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class LowPass Constructors LowPass(Double) Constructor Declaration public LowPass(double TimeBase_s) Parameters Type Name Description System.Double TimeBase_s The time base, the time interval between each time step of the dataset, in seconds Methods Filter(Double, Double, Int32, Boolean) Adds a single data point to the filter Declaration public double Filter(double signal, double FilterTc_s, int order = 1, bool doReset = false) Parameters Type Name Description System.Double signal data point System.Double FilterTc_s filter time constant in seconds System.Int32 order filter order, eitehr 1 or 2 is supported System.Boolean doReset usually false, setting to true causes filter to reset to the value of signal Returns Type Description System.Double Filter(Double[], Double, Int32) Filter an entire time-series in one command Declaration public double[] Filter(double[] signal, double FilterTc_s, int order = 1) Parameters Type Name Description System.Double [] signal the vector of the entire time-series to be filtered System.Double FilterTc_s filter time constant System.Int32 order filter order, either 1 or 2 Returns Type Description System.Double [] a vector of the filtered time-series"
  },
  "api/TimeSeriesAnalysis.Utility.MovingAvg.html": {
    "href": "api/TimeSeriesAnalysis.Utility.MovingAvg.html",
    "title": "Class MovingAvg | TimeSeriesAnalysis reference documentation",
    "keywords": "Class MovingAvg Moving-average filter of time-series Inheritance System.Object MovingAvg Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class MovingAvg Constructors MovingAvg(Int32) constructor Declaration public MovingAvg(int bufferSize) Parameters Type Name Description System.Int32 bufferSize the number of samples to average, which determines the size of the buffer to create Methods Add(Double) Add one more value to the moving-average filter, call this method iterativly. Declaration public double Add(double val) Parameters Type Name Description System.Double val the scalar value to be added Returns Type Description System.Double"
  },
  "api/TimeSeriesAnalysis.Utility.ParserFeedback.html": {
    "href": "api/TimeSeriesAnalysis.Utility.ParserFeedback.html",
    "title": "Class ParserFeedback | TimeSeriesAnalysis reference documentation",
    "keywords": "Class ParserFeedback Inheritance System.Object ParserFeedback Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class ParserFeedback Constructors ParserFeedback(Boolean) Declaration public ParserFeedback(bool doOutputAlsoToConsole = false) Parameters Type Name Description System.Boolean doOutputAlsoToConsole Methods AddError(String) Declaration public void AddError(string message) Parameters Type Name Description System.String message AddFatalError(String) Declaration public void AddFatalError(string message) Parameters Type Name Description System.String message AddInfo(String) Adds an info message Declaration public void AddInfo(string message) Parameters Type Name Description System.String message AddWarning(String) Adds a warning Declaration public void AddWarning(string message) Parameters Type Name Description System.String message Close() Flushes all messages to file and closes file handlers. Declaration public void Close() CloseCaseLogFile() Declaration public void CloseCaseLogFile() CreateCaseLogFile(String, Int32) Creates a new empty log file for a specific case name. Calling this function before StoreMessage will cause all messages to be copied to it. Declaration public void CreateCaseLogFile(string caseName, int caseNum) Parameters Type Name Description System.String caseName System.Int32 caseNum CreateCommonHTMLfile() Creates a html file, where is \"case\" is presented in an iframe- useful for quickly viewing many cases Needs SetCaseArray to be called first Declaration public void CreateCommonHTMLfile() CreateCommonLogFile(String) Creates a new empty log file and, resets counters etc. This is a \"common\" file if no cases are specificed Declaration public void CreateCommonLogFile(string loggDir) Parameters Type Name Description System.String loggDir EnableConsoleOutput(Boolean) Declaration public void EnableConsoleOutput(bool doEnable) Parameters Type Name Description System.Boolean doEnable GetFirstErrorOrWarning() Intended for unit tests, get the first error or warning message Declaration public string GetFirstErrorOrWarning() Returns Type Description System.String GetListOfAllLogLinesAtOrAboveLevel(ParserfeedbackMessageLevel) Returns all log lines at or above a specified level Declaration public List<string> GetListOfAllLogLinesAtOrAboveLevel(ParserfeedbackMessageLevel desiredLevel = ParserfeedbackMessageLevel.warn) Parameters Type Name Description ParserfeedbackMessageLevel desiredLevel Returns Type Description System.Collections.Generic.List < System.String > GetListOfAllLogLinesAtOrBelowLevel(ParserfeedbackMessageLevel) Returns all log lines at or belowe a specified level Declaration public List<string> GetListOfAllLogLinesAtOrBelowLevel(ParserfeedbackMessageLevel desiredLevel = ParserfeedbackMessageLevel.warn) Parameters Type Name Description ParserfeedbackMessageLevel desiredLevel Returns Type Description System.Collections.Generic.List < System.String > GetListOfAllLogLinesOfLevel(ParserfeedbackMessageLevel) Returns all log lines of a specified level Declaration public List<string> GetListOfAllLogLinesOfLevel(ParserfeedbackMessageLevel desiredLevel) Parameters Type Name Description ParserfeedbackMessageLevel desiredLevel Returns Type Description System.Collections.Generic.List < System.String > GetLogFilename() Declaration public string GetLogFilename() Returns Type Description System.String GetLogFilePath() Declaration public string GetLogFilePath() Returns Type Description System.String IsNumberOfErrorsAndWarningsZero() For testing, this is a way to check that no errors or warnings have been given. Declaration public bool IsNumberOfErrorsAndWarningsZero() Returns Type Description System.Boolean ResetCounters() Declaration public void ResetCounters() SetCaseArray(String[]) Declaration public void SetCaseArray(string[] caseArray) Parameters Type Name Description System.String [] caseArray"
  },
  "api/TimeSeriesAnalysis.Utility.ParserFeedbackLogLine.html": {
    "href": "api/TimeSeriesAnalysis.Utility.ParserFeedbackLogLine.html",
    "title": "Struct ParserFeedbackLogLine | TimeSeriesAnalysis reference documentation",
    "keywords": "Struct ParserFeedbackLogLine Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public struct ParserFeedbackLogLine Fields message Declaration public string message Field Value Type Description System.String messageLevel Declaration public ParserfeedbackMessageLevel messageLevel Field Value Type Description ParserfeedbackMessageLevel time Declaration public DateTime time Field Value Type Description System.DateTime"
  },
  "api/TimeSeriesAnalysis.Utility.ParserfeedbackMessageLevel.html": {
    "href": "api/TimeSeriesAnalysis.Utility.ParserfeedbackMessageLevel.html",
    "title": "Enum ParserfeedbackMessageLevel | TimeSeriesAnalysis reference documentation",
    "keywords": "Enum ParserfeedbackMessageLevel Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public enum ParserfeedbackMessageLevel Fields Name Description error fatal info warn"
  },
  "api/TimeSeriesAnalysis.Utility.Plot.html": {
    "href": "api/TimeSeriesAnalysis.Utility.Plot.html",
    "title": "Class Plot | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Plot Static methods for plotting one or more time-series across one or more y-axes and one or more subplots. If you sometimes need to disable plots (for instance if plotting code is included in unit tests) see Plot4Test Inheritance System.Object Plot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class Plot Methods Five(Double[], Double[], Double[], Double[], Double[], Int32, String, String, String, String, String, Boolean, Boolean, String, DateTime) (deprecated)Plot five vectors V1,V2,V3,V4,V5 where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void Five(double[] V1, double[] V2, double[] V3, double[] V4, double[] V5, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", string tagNameV5 = \"Var5\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Double [] V5 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.String tagNameV5 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Four(Double[], Double[], Double[], Double[], Int32, String, String, String, String, Boolean, Boolean, String, DateTime) (deprecated)Plot four vectors V1,V2,V3,V4 where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void Four(double[] V1, double[] V2, double[] V3, double[] V4, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 FromList(List<Double[]>, List<String>, Int32, String, DateTime, String, Boolean, String) Plot any number of variables,by giving values and names by lists (preferred) If you want to plot mutliple plots with the same variable names, specify a unique casename for each plot. By setting doStartChrome to false, you can skip opening up chrome, the link to figure will instead be returned Declaration public static string FromList(List<double[]> plotValue, List<string> plotNames, int dT_s, string comment = null, DateTime t0 = default(DateTime), string caseName = \"\", bool doStartChrome = true, string customPlotDataPath = null) Parameters Type Name Description System.Collections.Generic.List < System.Double []> plotValue System.Collections.Generic.List < System.String > plotNames System.Int32 dT_s System.String comment System.DateTime t0 System.String caseName System.Boolean doStartChrome System.String customPlotDataPath Returns Type Description System.String One(Double[], Int32, String, String, DateTime) (deprecated)Plot one vector X, where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void One(double[] X, int dT_s, string tagName = \"Var1\", string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] X System.Int32 dT_s System.String tagName System.String comment System.DateTime t0 Six(Double[], Double[], Double[], Double[], Double[], Double[], Int32, String, String, String, String, String, String, Boolean, Boolean, String, DateTime) (deprecated)Plot six vectors V1,V2,V3,V4 where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void Six(double[] V1, double[] V2, double[] V3, double[] V4, double[] V5, double[] V6, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", string tagNameV5 = \"Var5\", string tagNameV6 = \"Var6\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Double [] V5 System.Double [] V6 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.String tagNameV5 System.String tagNameV6 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Three(Double[], Double[], Double[], Int32, String, String, String, Boolean, Boolean, String, DateTime) (deprecated)Plot three vectors V1,V2,V3 where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void Three(double[] V1, double[] V2, double[] V3, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Two(Double[], Double[], Int32, String, String, Boolean, Boolean, String, DateTime) (deprecated) Plot two vectors V1 and V2, where the sampling time interval is dT_s. Declaration [Obsolete(\"Deprecated, please use FromList instead.\")] public static void Two(double[] V1, double[] V2, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", bool plotAllVarsOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.Boolean plotAllVarsOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0"
  },
  "api/TimeSeriesAnalysis.Utility.Plot4Test.html": {
    "href": "api/TimeSeriesAnalysis.Utility.Plot4Test.html",
    "title": "Class Plot4Test | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Plot4Test Version of Plot class where plots code can be Enabled()/Disabled() programatically. This allows you to keep all your \"Plot\" calls in your unit tests and turn them on as needed to debug a single test, while avoid being overwhelmed with plots if for instance re-running all unit tests. Inheritance System.Object Plot4Test Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class Plot4Test Constructors Plot4Test(Boolean, Int32) Determine wheter plots are to be enabled or disabled on. To further prevent thousands of plots from accidentally being created by this object a maximum number of plots is set, override as needed. Declaration public Plot4Test(bool enableByDefault = true, int maxNplots = 6) Parameters Type Name Description System.Boolean enableByDefault System.Int32 maxNplots Methods Disable() Disable all subsequent calls to plot using the same instance of this class. Declaration public void Disable() Enable() Enable all subsequent calls to plot using the same instance of this class. Declaration public void Enable() Five(Double[], Double[], Double[], Double[], Double[], Int32, String, String, String, String, String, Boolean, Boolean, String, DateTime) Plot five vectors V1,V2,V3,V4,V5 where the sampling time interval is dT_s. Declaration public void Five(double[] V1, double[] V2, double[] V3, double[] V4, double[] V5, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", string tagNameV5 = \"Var5\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Double [] V5 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.String tagNameV5 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Four(Double[], Double[], Double[], Double[], Int32, String, String, String, String, Boolean, Boolean, String, DateTime) Plot three vectors V1,V2,V3,V4 where the sampling time interval is dT_s. Declaration public void Four(double[] V1, double[] V2, double[] V3, double[] V4, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 GetNumberOfPlotsMade() Declaration public int GetNumberOfPlotsMade() Returns Type Description System.Int32 One(Double[], Int32, String, String, DateTime) Plot one vector X, where the sampling time interval is dT_s. Declaration public void One(double[] X, int dT_s, string tagName = \"Var1\", string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] X System.Int32 dT_s System.String tagName System.String comment System.DateTime t0 Six(Double[], Double[], Double[], Double[], Double[], Double[], Int32, String, String, String, String, String, String, Boolean, Boolean, String, DateTime) Plot six vectors V1,V2,V3,V4 where the sampling time interval is dT_s. Declaration public void Six(double[] V1, double[] V2, double[] V3, double[] V4, double[] V5, double[] V6, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", string tagNameV4 = \"Var4\", string tagNameV5 = \"Var5\", string tagNameV6 = \"Var6\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Double [] V4 System.Double [] V5 System.Double [] V6 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.String tagNameV4 System.String tagNameV5 System.String tagNameV6 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Three(Double[], Double[], Double[], Int32, String, String, String, Boolean, Boolean, String, DateTime) Plot three vectors V1, V2, V3 where the sampling time interval is dT_s. Declaration public void Three(double[] V1, double[] V2, double[] V3, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", string tagNameV3 = \"Var3\", bool plotAllOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Double [] V3 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.String tagNameV3 System.Boolean plotAllOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0 Two(Double[], Double[], Int32, String, String, Boolean, Boolean, String, DateTime) Plot two vectors V1 and V2, where the sampling time interval is dT_s. Declaration public void Two(double[] V1, double[] V2, int dT_s, string tagNameV1 = \"Var1\", string tagNameV2 = \"Var2\", bool plotAllVarsOnLeftYaxis = true, bool useSubplots = false, string comment = null, DateTime t0 = default(DateTime)) Parameters Type Name Description System.Double [] V1 System.Double [] V2 System.Int32 dT_s System.String tagNameV1 System.String tagNameV2 System.Boolean plotAllVarsOnLeftYaxis System.Boolean useSubplots System.String comment System.DateTime t0"
  },
  "api/TimeSeriesAnalysis.Utility.SignificantDigits.html": {
    "href": "api/TimeSeriesAnalysis.Utility.SignificantDigits.html",
    "title": "Class SignificantDigits | TimeSeriesAnalysis reference documentation",
    "keywords": "Class SignificantDigits Utility class to round double variables to a given nubmer of signficant digits. Inheritance System.Object SignificantDigits Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public static class SignificantDigits Fields DecimalSeparator Declaration public static string DecimalSeparator Field Value Type Description System.String Methods Format(Double, Int32) Rounds down to number of significant digits (26->20 if digits=1 for instance) Declaration public static double Format(double number, int digits) Parameters Type Name Description System.Double number System.Int32 digits Returns Type Description System.Double Format(Double, Int32, out Int32) Rounds down to number of significant digits (26->20 if digits=1 for instance) Declaration public static double Format(double number, int digits, out int exponent) Parameters Type Name Description System.Double number System.Int32 digits System.Int32 exponent Returns Type Description System.Double GetSciFormat(Double, out Double, out Int32) Returns number in scientific format with coefficient and exponential paramters Declaration public static void GetSciFormat(double number, out double coeff, out int exp) Parameters Type Name Description System.Double number System.Double coeff System.Int32 exp SciToDouble(Double, Int32) Converts a scientific number on the format coeff*10^exp to a double Declaration public static double SciToDouble(double coeff, int exp) Parameters Type Name Description System.Double coeff coefficient System.Int32 exp exponent Returns Type Description System.Double converted double"
  },
  "api/TimeSeriesAnalysis.Utility.StringToFileWriter.html": {
    "href": "api/TimeSeriesAnalysis.Utility.StringToFileWriter.html",
    "title": "Class StringToFileWriter | TimeSeriesAnalysis reference documentation",
    "keywords": "Class StringToFileWriter IO Utility class to write to file. Inheritance System.Object StringToFileWriter Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class StringToFileWriter : IDisposable Constructors StringToFileWriter(String) Declaration public StringToFileWriter(string filename) Parameters Type Name Description System.String filename StringToFileWriter(String, Encoding) Declaration public StringToFileWriter(string filename, Encoding encoding) Parameters Type Name Description System.String filename System.Text.Encoding encoding Methods Close() Declaration public void Close() CreateDirectoryStructure(String) Declaration public void CreateDirectoryStructure(string FilePath) Parameters Type Name Description System.String FilePath Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Write(String) Declaration public void Write(string text) Parameters Type Name Description System.String text Implements System.IDisposable"
  },
  "api/TimeSeriesAnalysis.Utility.UnixTime.html": {
    "href": "api/TimeSeriesAnalysis.Utility.UnixTime.html",
    "title": "Class UnixTime | TimeSeriesAnalysis reference documentation",
    "keywords": "Class UnixTime Utility class to work with unix time stamps Inheritance System.Object UnixTime Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis.Utility Assembly : TimeSeriesAnalysis.dll Syntax public class UnixTime Methods ConvertFromUnixTimestamp(Double) Declaration public static DateTime ConvertFromUnixTimestamp(double timestamp) Parameters Type Name Description System.Double timestamp Returns Type Description System.DateTime ConvertToUnixTimestamp(DateTime) Declaration public static double ConvertToUnixTimestamp(DateTime date) Parameters Type Name Description System.DateTime date Returns Type Description System.Double GetNowUnixTime() Declaration public static double GetNowUnixTime() Returns Type Description System.Double"
  },
  "api/TimeSeriesAnalysis.Vec.html": {
    "href": "api/TimeSeriesAnalysis.Vec.html",
    "title": "Class Vec | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Vec Inheritance System.Object Vec Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class Vec Methods Abs(Double[]) returns an array where each value is the absolute value of array1 Declaration public static double[] Abs(double[] array1) Parameters Type Name Description System.Double [] array1 Returns Type Description System.Double [] Add(Double[], Double) elementwise addition of val2 to array1 Declaration public static double[] Add(double[] array1, double val2) Parameters Type Name Description System.Double [] array1 System.Double val2 Returns Type Description System.Double [] Add(Double[], Double[]) returns an array which is the elementwise addition of array1 and array2 Declaration public static double[] Add(double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] Add(Int32[], Int32) elementwise addition of val2 to array1 Declaration public static int[] Add(int[] array1, int val2) Parameters Type Name Description System.Int32 [] array1 System.Int32 val2 Returns Type Description System.Int32 [] AppendTrailingIndices(List<Int32>) When filtering out bad data before identification, before fitting data to difference equations that depend both y[k] and y[k-1] it will some times be neccessary, to append the trailing indices for instance on Declaration public static List<int> AppendTrailingIndices(List<int> indiceArray) Parameters Type Name Description System.Collections.Generic.List < System.Int32 > indiceArray Returns Type Description System.Collections.Generic.List < System.Int32 > ContainsBadData(Double[]) Returns true f array contains a \"-9999\" or NaN indicating missing data Declaration public static bool ContainsBadData(double[] x) Parameters Type Name Description System.Double [] x Returns Type Description System.Boolean Cov(Double[], Double[], Boolean) returns the co-variance of two arrays(interpreted as \"vectors\") Declaration public static double Cov(double[] array1, double[] array2, bool doNormalize = false) Parameters Type Name Description System.Double [] array1 System.Double [] array2 System.Boolean doNormalize Returns Type Description System.Double Deserialize(String) de-serializes a single vector/array (written by serialize) Declaration public static double[] Deserialize(string fileName) Parameters Type Name Description System.String fileName Returns Type Description System.Double [] Diff(Double[]) returns an array of the difference between every neighbhoring item in array Declaration public static double[] Diff(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double [] FindValues(Double[], Double, VectorFindValueType) return the indices of elements in the array that have certain relation to value given type (bigger,smaller,equal etc.) Also capable of finding NaN values Declaration public static List<int> FindValues(double[] vec, double value, VectorFindValueType type) Parameters Type Name Description System.Double [] vec System.Double value VectorFindValueType type Returns Type Description System.Collections.Generic.List < System.Int32 > Intersect(List<Int32>, List<Int32>) returns the intersection of array1 and array2, a list of elements that are in both vectors Declaration public static List<int> Intersect(List<int> vec1, List<int> vec2) Parameters Type Name Description System.Collections.Generic.List < System.Int32 > vec1 System.Collections.Generic.List < System.Int32 > vec2 Returns Type Description System.Collections.Generic.List < System.Int32 > InverseIndices(Int32, List<Int32>) given a list of sorted indeces and a desired vector size N, returns the indices that are not in \"sortedIndices\" i.e. of the \"other vectors Declaration public static List<int> InverseIndices(int N, List<int> sortedIndices) Parameters Type Name Description System.Int32 N System.Collections.Generic.List < System.Int32 > sortedIndices Returns Type Description System.Collections.Generic.List < System.Int32 > IsAllNaN(Double[]) Returns true if all elements in array are \"-9999\" or Double.NaN Declaration public static bool IsAllNaN(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Boolean IsAllValue(Double[], Double) Returns true if all elements in array are the specific value Declaration public static bool IsAllValue(double[] array, double value = 0) Parameters Type Name Description System.Double [] array System.Double value Returns Type Description System.Boolean MakeIndexArray(Int32, Int32) creates a monotonically increasing integer (11.12.13...) array starting at startValue and ending at endValue Declaration public static int[] MakeIndexArray(int startValue, int endValue) Parameters Type Name Description System.Int32 startValue System.Int32 endValue Returns Type Description System.Int32 [] Max(Double[]) Returns maximum value of array Declaration public static double Max(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double Max(Double[], Double) Returns element-wise maximum of array element and value Declaration public static double[] Max(double[] array, double value) Parameters Type Name Description System.Double [] array System.Double value Returns Type Description System.Double [] Max(Double[], Double[]) Returns maximum value of two array as new array Declaration public static double[] Max(double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] Max(Double[], Int32, Int32) Returns maximum value of array between indices startInd and endInd Declaration public static double Max(double[] array, int startInd, int endInd) Parameters Type Name Description System.Double [] array System.Int32 startInd System.Int32 endInd Returns Type Description System.Double Max(Double[], out Int32) Returns maximum value of array and index of maximum value Declaration public static double Max(double[] array, out int ind) Parameters Type Name Description System.Double [] array System.Int32 ind Returns Type Description System.Double Mean(Double[]) returns the mean value of array1 Declaration public static double? Mean(double[] array1) Parameters Type Name Description System.Double [] array1 Returns Type Description System.Nullable < System.Double > Min(Double[]) Returns minimum value of array Declaration public static double Min(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double Min(Double[], Double) Returns element-wise minimum of array element and value Declaration public static double[] Min(double[] array, double value) Parameters Type Name Description System.Double [] array System.Double value Returns Type Description System.Double [] Min(Double[], Double[]) Returns minimum value of two array as new array Declaration public static double[] Min(double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] Min(Double[], out Int32) Returns minimum value of array and index of maximum value Declaration public static double Min(double[] array, out int ind) Parameters Type Name Description System.Double [] array System.Int32 ind Returns Type Description System.Double Mult(Double[], Double) elementwise multipliation of val2 to array1 Declaration public static double[] Mult(double[] array1, double val2) Parameters Type Name Description System.Double [] array1 System.Double val2 Returns Type Description System.Double [] Mult(Double[], Double[]) elementwise multiplication of array1 and array2, assuming they are same size Declaration public static double[] Mult(double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] Rand(Int32, Double, Double) returns an array of size N of random numbers, the range of random numbers [0,1](can be overridden) Declaration public static double[] Rand(int N, double minValue = 0, double maxValue = 1) Parameters Type Name Description System.Int32 N System.Double minValue System.Double maxValue Returns Type Description System.Double [] Range(Double[]) Returns range of an array, the difference between minimum and maximum Declaration public static double Range(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double Regress(Double[], Double[][]) Linear regression: Fit a linear model to Y based on inputs X Declaration public static double[] Regress(double[] Y, double[][] X) Parameters Type Name Description System.Double [] Y one-dimensional vector/array of output paramters y that is to be modelled System.Double [][] X two-dimensonal array of input vectors X that are the inputs Returns Type Description System.Double [] returns the parameters(one for each column in X and a bias term) which best regress the two-dimensional array X into the vector Y. Returns null if regression fails. Regress(Double[], Double[][], Int32[], out Double[], out Double[], out Double) regression where the rows corresponding to indices yIndToIgnore are ignored (bad data identified in preprocessing) Declaration public static double[] Regress(double[] Y, double[][] X, int[] yIndToIgnore, out double[] param95prcConfInterval, out double[] Y_modelled, out double Rsq) Parameters Type Name Description System.Double [] Y System.Double [][] X System.Int32 [] yIndToIgnore System.Double [] param95prcConfInterval System.Double [] Y_modelled System.Double Rsq Returns Type Description System.Double [] Regress(Double[], Double[][], Int32[], out Double[], out Double[][], out Double[], out Double) regression where the rows corresponding to indices yIndToIgnore are ignored (bad data identified in preprocessing) uncertainties in parameters, covariance matrix, modelled output y and R-squared number is also given. Declaration public static double[] Regress(double[] Y, double[][] X, int[] yIndToIgnore, out double[] param95prcConfInterval, out double[][] varCovarMatrix, out double[] Y_modelled, out double Rsq) Parameters Type Name Description System.Double [] Y System.Double [][] X System.Int32 [] yIndToIgnore System.Double [] param95prcConfInterval System.Double [][] varCovarMatrix System.Double [] Y_modelled System.Double Rsq Returns Type Description System.Double [] ReplaceIndWithValue(Double[], List<Int32>, Double) replaces all the vaules in array with indices in indList NaN Declaration public static double[] ReplaceIndWithValue(double[] array, List<int> indList, double valueToReplaceWith) Parameters Type Name Description System.Double [] array System.Collections.Generic.List < System.Int32 > indList System.Double valueToReplaceWith Returns Type Description System.Double [] RSquared(Double[], Double[], List<Int32>) R-squared R-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model. Whereas correlation explains the strength of the relationship between an independent and dependent variable, R-squared explains to what extent the variance of one variable explains the variance of the second variable. So, if the R2 of a model is 0.50, then approximately half of the observed variation can be explained by the model's inputs. Declaration public static double RSquared(double[] vector1, double[] vector2, List<int> indToIgnoreExt = null) Parameters Type Name Description System.Double [] vector1 first vector System.Double [] vector2 second vector System.Collections.Generic.List < System.Int32 > indToIgnoreExt optionally: indices to be ignored(for instance bad values) Returns Type Description System.Double R2 squared, a value between -1 and 1. If an error occured,Double.PositiveInfinity is returned SelfSumOfAbsErr(Double[]) sum of absolute error of the vector compared to itself Declaration public static double SelfSumOfAbsErr(double[] vec) Parameters Type Name Description System.Double [] vec Returns Type Description System.Double SelfSumOfSquareErr(Double[]) sum of square error of the vector compared to itself Declaration public static double SelfSumOfSquareErr(double[] vec) Parameters Type Name Description System.Double [] vec Returns Type Description System.Double Serialize(Double[], String) serializes a single vector/array to a file for persistent storage to a human-readable text format Declaration public static bool Serialize(double[] vector, string fileName) Parameters Type Name Description System.Double [] vector System.String fileName Returns Type Description System.Boolean Sub(Double[], Double) elementwise subtraction of val2 from array1 Declaration public static double[] Sub(double[] array1, double val2) Parameters Type Name Description System.Double [] array1 System.Double val2 Returns Type Description System.Double [] Sub(Double[], Double[]) elementwise subtraction of array1 and array2, assuming they are same size Declaration public static double[] Sub(double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] Sub(Int32[], Int32) subtracts val2 from array2 elements Declaration public static int[] Sub(int[] array1, int val2) Parameters Type Name Description System.Int32 [] array1 System.Int32 val2 Returns Type Description System.Int32 [] Sum(Double[]) returns the sum of array1 Declaration public static double? Sum(double[] array1) Parameters Type Name Description System.Double [] array1 Returns Type Description System.Nullable < System.Double > SumOfAbsErr(Double[], Double[], Int32) The sum of absolute errors (|a1-a2|) between array1 and array2 Declaration public static double SumOfAbsErr(double[] array1, double[] array2, int indexOffset = -1) Parameters Type Name Description System.Double [] array1 System.Double [] array2 System.Int32 indexOffset Returns Type Description System.Double SumOfSquareErr(Double[], Double, Boolean) sum of square error of the vector compared to a constant. by defautl the return value is normalized by dividing by, this normalization can be turned off Declaration public static double SumOfSquareErr(double[] vec, double constant, bool doNormalization = true) Parameters Type Name Description System.Double [] vec System.Double constant System.Boolean doNormalization Returns Type Description System.Double SumOfSquareErr(Double[], Double[], Int32, Boolean) The sum of absolute errors (a1-a2)^2 between array1 and array2 Declaration public static double SumOfSquareErr(double[] ymod, double[] ymeas, int ymodOffset = -1, bool divByN = true) Parameters Type Name Description System.Double [] ymod System.Double [] ymeas System.Int32 ymodOffset System.Boolean divByN Returns Type Description System.Double ToString(Double[], Int32, String) Declaration public static string ToString(double[] array, int nSignificantDigits, string dividerStr = \";\") Parameters Type Name Description System.Double [] array System.Int32 nSignificantDigits System.String dividerStr Returns Type Description System.String Union(List<Int32>, List<Int32>) returns the union of array1 and array2, a list of elements that are in either vector Declaration public static List<int> Union(List<int> vec1, List<int> vec2) Parameters Type Name Description System.Collections.Generic.List < System.Int32 > vec1 System.Collections.Generic.List < System.Int32 > vec2 Returns Type Description System.Collections.Generic.List < System.Int32 > Var(Double[], Boolean) returns the variance of the array (always apositive number) Declaration public static double Var(double[] array1, bool doNormalize = false) Parameters Type Name Description System.Double [] array1 System.Boolean doNormalize Returns Type Description System.Double"
  },
  "api/TimeSeriesAnalysis.Vec-1.html": {
    "href": "api/TimeSeriesAnalysis.Vec-1.html",
    "title": "Class Vec<T> | TimeSeriesAnalysis reference documentation",
    "keywords": "Class Vec<T> Class for generic methods on any type T that treat arrays as vectors(sorting,slicing,concatenating). For mathematical methods on vectors of doubles and integers, look into non-generic sister class \"Vec\". Inheritance System.Object Vec<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class Vec<T> Type Parameters Name Description T Methods Concat(T[], T) concatenates the value y to the end of array x Declaration public static T[] Concat(T[] x, T y) Parameters Type Name Description T[] x T y Returns Type Description T[] Concat(T[], T[]) concatenates arrays x and y into a new larger array Declaration public static T[] Concat(T[] x, T[] y) Parameters Type Name Description T[] x T[] y Returns Type Description T[] Fill(T, Int32) creates an array of size N where every element has value value Declaration public static T[] Fill(T value, int N) Parameters Type Name Description T value System.Int32 N Returns Type Description T[] GetValuesAtIndices(T[], List<Int32>) returns an array of the values that are in array at the indeices given by indices list Declaration public static T[] GetValuesAtIndices(T[] array, List<int> indices) Parameters Type Name Description T[] array System.Collections.Generic.List < System.Int32 > indices Returns Type Description T[] ReplaceIndWithValuesPrior(Double[], List<Int32>) replaces all the vaules in array with indices in indList with the last good value prior to that index. Declaration public static double[] ReplaceIndWithValuesPrior(double[] array, List<int> indList) Parameters Type Name Description System.Double [] array System.Collections.Generic.List < System.Int32 > indList Returns Type Description System.Double [] Sort(T[], VectorSortType) sort the vector vec acording to the sortType. Declaration public static T[] Sort(T[] vec, VectorSortType sortType) Parameters Type Name Description T[] vec VectorSortType sortType Returns Type Description T[] Sort(T[], VectorSortType, out Int32[]) sort the vector vec acording to the sortType. The indices corresponding tot he sorted values are given out in the idx array. Declaration public static T[] Sort(T[] vec, VectorSortType sortType, out int[] idx) Parameters Type Name Description T[] vec VectorSortType sortType System.Int32 [] idx Returns Type Description T[] SubArray(T[], Int32, Int32) returns the portion of array1 starting and indStart, and ending at indEnd(or at the end if third paramter is omitted) Declaration public static T[] SubArray(T[] array1, int indStart, int indEnd = -9999) Parameters Type Name Description T[] array1 System.Int32 indStart System.Int32 indEnd Returns Type Description T[]"
  },
  "api/TimeSeriesAnalysis.VecExtensionMethods.html": {
    "href": "api/TimeSeriesAnalysis.VecExtensionMethods.html",
    "title": "Class VecExtensionMethods | TimeSeriesAnalysis reference documentation",
    "keywords": "Class VecExtensionMethods Utility functions and operations for treating arrays as mathetmatical vectors Inheritance System.Object VecExtensionMethods Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public static class VecExtensionMethods Methods Add(Double[], Double) Declaration public static double[] Add(this double[] array, double scalar) Parameters Type Name Description System.Double [] array System.Double scalar Returns Type Description System.Double [] Mult(Double[], Double) Declaration public static double[] Mult(this double[] array, double scalar) Parameters Type Name Description System.Double [] array System.Double scalar Returns Type Description System.Double [] Sub(Double[], Double[]) Declaration public static double[] Sub(this double[] array1, double[] array2) Parameters Type Name Description System.Double [] array1 System.Double [] array2 Returns Type Description System.Double [] ToString(Double[], Int32, String) Declaration public static string ToString(this double[] array, int nSignificantDigits, string dividerStr = \";\") Parameters Type Name Description System.Double [] array System.Int32 nSignificantDigits System.String dividerStr Returns Type Description System.String"
  },
  "api/TimeSeriesAnalysis.VectorFindValueType.html": {
    "href": "api/TimeSeriesAnalysis.VectorFindValueType.html",
    "title": "Enum VectorFindValueType | TimeSeriesAnalysis reference documentation",
    "keywords": "Enum VectorFindValueType Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public enum VectorFindValueType Fields Name Description BiggerOrEqual BiggerThan Equal NaN NotNaN SmallerOrEqual SmallerThan"
  },
  "api/TimeSeriesAnalysis.VectorSortType.html": {
    "href": "api/TimeSeriesAnalysis.VectorSortType.html",
    "title": "Enum VectorSortType | TimeSeriesAnalysis reference documentation",
    "keywords": "Enum VectorSortType Namespace : TimeSeriesAnalysis Assembly : TimeSeriesAnalysis.dll Syntax public enum VectorSortType Fields Name Description Ascending Descending"
  },
  "articles/example_linreg.html": {
    "href": "articles/example_linreg.html",
    "title": "Example : realistic linear regression | TimeSeriesAnalysis reference documentation",
    "keywords": "Example : realistic linear regression This example uses a ficticious csv-file example.csv, that has column headers \"Time\",\"Var1\",\"Var2\",\"Var3\",\"Var4,\"Var5\",Var6\",\"Var7\". \"Var1\" is to be modelled by Var2 - Var6 as regressors, while Var7 is to be multiplied to Var2 - Var6 . The data contains some instances of -9999 which indicates bad data, and this is removed in preprocessing. A low-pass filter is used to imitate a time-constant in the system by smoothing the model inputs. Only the data starting after a specific t0 is to be used in the regression, so a subset of the raw data in the csv-file is given to regression. This example illustrates that by using the TimeSeriesAnalysis package, the complexity of the code required to do practical exploratory time-series analysis is comparable to what is normally accomplished by parsed languages such as Matlab, R or Python. using System; using System.Collections.Generic; using System.Linq; using TimeSeriesAnalysis; namespace SubseaPALL { class run { public static void Main() { CSV.loadDataFromCSV(@\"C:\\Appl\\ex1\\Data\\example.csv\", out double[,] data, out string[] variableNames,out string[,] stringData); int tInd = Array.IndexOf(variableNames, \"Time\"); DateTime[] dateTimes = stringData.GetColumnParsedAsDateTime(tInd, \"yyyy-MM-dd HH:mm:ss\"); TimeSpan span = dateTimes[1].Subtract(dateTimes[0]); int dT_s = (int)span.TotalSeconds; int t0Ind = 9476;// first instance DateTime t0 = dateTimes.ElementAt(t0Ind); int yInd = Array.IndexOf(variableNames, \"var1\"); //V1: use choke openings as inputs int u1Ind, u2Ind, u3Ind, u4Ind, u5Ind; u1Ind = Array.IndexOf(variableNames, \"var2\"); u2Ind = Array.IndexOf(variableNames, \"var3\"); u3Ind = Array.IndexOf(variableNames, \"var4\"); u4Ind = Array.IndexOf(variableNames, \"var5\"); u5Ind = Array.IndexOf(variableNames, \"var6\"); int u6ind = Array.IndexOf(variableNames, \"var7\"); int[] uIndArray = new int[] { u1Ind, u2Ind, u3Ind, u4Ind, u5Ind }; double[] y_raw = data.GetColumn(yInd); double[,] u_raw = data.GetColumns(uIndArray) ; double[] u6_raw = data.GetColumn(u6ind); // clip out desired chunk of data double[] y = y_raw.GetRowsAfterIndex(t0Ind); double[,] u = u_raw.GetRowsAfterIndex(t0Ind); double[] z_topside = u6_raw.GetRowsAfterIndex(t0Ind); // preprocessing - remove bad values List<int> yIndToIgnoreRaw = new List<int>(); for (int colInd = 0; colInd < u.GetNColumns(); colInd++) { List<int> badValInd = Vec.FindValues(u.GetColumn(colInd), -9999, FindValues.NaN); yIndToIgnoreRaw.AddRange(badValInd); } yIndToIgnoreRaw.AddRange(Vec.FindValues(y, -9999, FindValues.NaN)); yIndToIgnoreRaw.AddRange(Vec.FindValues(z_topside, -9999, FindValues.NaN)); List<int> yIndToIgnore =(List<int>)yIndToIgnoreRaw.Distinct().ToList(); // do scaling, input trickery and then regress u = u.Transpose(); double[] y_plot = Vec.ReplaceIndWithValuesPrior(y, yIndToIgnore);// -9999 destroys plot double[] u1_plot = Vec.ReplaceIndWithValuesPrior(u.GetRow(0), yIndToIgnore);// -9999 destroys plot double[] u2_plot = Vec.ReplaceIndWithValuesPrior(u.GetRow(1), yIndToIgnore);// -9999 destroys plot double[] u3_plot = Vec.ReplaceIndWithValuesPrior(u.GetRow(2), yIndToIgnore);// -9999 destroys plot double[] u4_plot = Vec.ReplaceIndWithValuesPrior(u.GetRow(3), yIndToIgnore);// -9999 destroys plot double[] u5_plot = Vec.ReplaceIndWithValuesPrior(u.GetRow(4), yIndToIgnore);// -9999 destroys plot double[] u6_plot = Vec.ReplaceIndWithValuesPrior(z_topside, yIndToIgnore);// -9999 destroys plot // temperature does not change much based on changes in the upper half of the range valve-opening rate, as flow rates also // do not change that much (valve flow vs. choke opening is nonlinear) double z_Max = 60; double z_MaxTopside = 80; u = Matrix.ReplaceRow(u,0, Vec.Min(u.GetRow(0), z_Max)); u = Matrix.ReplaceRow(u,1, Vec.Min(u.GetRow(1), z_Max)); u = Matrix.ReplaceRow(u,2, Vec.Min(u.GetRow(2), z_Max)); u = Matrix.ReplaceRow(u,3, Vec.Min(u.GetRow(3), z_Max)); u = Matrix.ReplaceRow(u,4, Vec.Min(u.GetRow(4), z_Max)); u = Matrix.Mult(u, 0.01); z_topside = Vec.Mult(Vec.Min(z_topside, z_MaxTopside), 0.01); z_topside = Vec.Mult(z_topside, 0.01); u = Matrix.Mult(u, z_topside); // lowpass filtering of inputs double TimeConstant_s = 1800;//73.24 LowPass filter = new LowPass(TimeConstant_s); u = Matrix.ReplaceRow(u, 0, filter.Filter(u.GetRow(0), TimeConstant_s)); u = Matrix.ReplaceRow(u, 1, filter.Filter(u.GetRow(1), TimeConstant_s)); u = Matrix.ReplaceRow(u, 2, filter.Filter(u.GetRow(2), TimeConstant_s)); u = Matrix.ReplaceRow(u, 3, filter.Filter(u.GetRow(3), TimeConstant_s)); u = Matrix.ReplaceRow(u, 4, filter.Filter(u.GetRow(4), TimeConstant_s)); if (u == null) { Console.WriteLine(\"u is null, something went wrong\"); return; } var uJaggedArray = u.Convert2DtoJagged(); double[] parameters = Vec.Regress(y, uJaggedArray, yIndToIgnore.ToArray(), out _, out double[] y_mod,out double Rsq); double[] e = Vec.Sub(y_plot, y_mod); //present results if (y_mod == null) { Console.WriteLine(\"something went wrong, regress returned null\"); } else { Plot.Six(u1_plot, u2_plot, u3_plot, u4_plot, u5_plot,u6_plot, dT_s,\"z_D1\", \"z_D2\", \"z_D3\", \"z_D4\",\"z_D5\",\"z_topside\",true,false,null,t0); Plot.Two(y_plot, y_mod, dT_s, \"T_Dtopside(meas)\", \"T_Dtopside(mod)\",true,false,\"Rsq\"+Rsq.ToString(\"#.##\"),t0); Plot.One(e,dT_s,\"avvik\",null, t0); } } } }"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "| TimeSeriesAnalysis reference documentation",
    "keywords": ""
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | TimeSeriesAnalysis reference documentation",
    "keywords": "Introduction In this folder you will find detailed worked-though articles including code samples."
  },
  "articles/nuget.html": {
    "href": "articles/nuget.html",
    "title": "Nuget package upload how-to | TimeSeriesAnalysis reference documentation",
    "keywords": "Nuget package upload how-to This is .NET framework 4.6.1 class library published to github packages, by means of the following tutorial: https://github.community/t/publish-net-framework-nuget-package/3077/2 and here: https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-msbuild Note that the steps here are somewhat different to most online tutorials which target .NET Core and use the \"dotnet\" CLI instead of \"nuget\" CLI. For future reference, this is the steps followed: make sure the classes you want to give access to are public. the description that will be shown in nuget when downloading is pulled from in the .csproj file beneath . Consider adding it. Also add the the url to the repository and some other info such as shown below: <RepositoryUrl>https://github.com/equinor/TimeSeriesAnalysis</RepositoryUrl> <RepositoryType>git</RepositoryType> <GeneratePackageOnBuild>true</GeneratePackageOnBuild> <PackageOutputPath>bin\\debug\\</PackageOutputPath> <Version>1.0.0</Version> <Authors>Steinar Elgsæter</Authors> <description>todo</description> reccomend adding in information to the AssemblyInfo.cs before starting. a personal acceess token xxxxxxx needs to be generated for your user in github,and needs access to \"read:packages\", \"write:packages\" and \"repo\".organization access (authorize with SSO ) and then press \"authorize\" create a nuget.config file that defines \"github\" as a nuget destination: <configuration> <packageSources> <clear /> <add key=\"github\" value=\"https://nuget.pkg.github.com/equinor/index.json\" /> <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" /> </packageSources> <packageSourceCredentials> <github> <add key=\"Username\" value=\"yourgithubuser\" /> <add key=\"ClearTextPassword\" value=xxxxxxx\" /> </github> </packageSourceCredentials> </configuration> pacakges.nuget needs to be moved into project file *.csproj as items instead NuGet.Build.Tasks.Pack need to be added as a pacakage to project need to download nuget.exe and use it to push generated .nupkg file then to publish put the following two commands in a publish.bat file: nuget setapikey xxxxxxxx -source \"github\" nuget push bin\\Debug\\*.nupkg -source \"github\" -SkipDuplicate pause check that the script concludes with \"Your package was pushed\" and no error messages in yellow or red. notice that you need to iterate the version number in your .csproj file every time you push a new version of the package. Warning Make sure that you do not check-in the nuget.config file you create, as it contains a secret token. Add nuget.config to your git ignore file. Nuget package download how-to To use this nuget pacakge, you need to incldue the nuget.config file above in the solution that intends to pull down the package. You can then select github as the package source in Visual Studio \"Manage Nuget packages for Solution\"."
  },
  "articles/nuget_setup.html": {
    "href": "articles/nuget_setup.html",
    "title": "Setting up NuGet | TimeSeriesAnalysis reference documentation",
    "keywords": "Setting up NuGet TimeSeriesAnalysis uses nuget to retreive pre-compiled open-source packages on which it is based. Nuget can be set up in several different ways. TimeSeriesAnalysis uses the PackageReference type of configuration, in which nuget configuration is stored in TimeSeriesAnalysis.csprocj . Note Nuget will not create a local packages subfolder upon a nuget restore .Instead it creates a global package folder on your computer in the folder %userprofile%\\.nuget\\packages . In some cases it is insightful to examine the contents of this folder if you are having any nuget issues. In Visual Studio , examine the menu TOOLS>Nuget Pacakge Manager>Package Manager Settngs . You should have the following selected: Allow NuGet to download missing packages (shoudl be Checked ) Automatically check for missing packages during build in Visual Studio (shoudl be Checked ) Default package management format should be PacakgeReference Note If you are having issues with nuget, you can try pressing Clear All NuGet Cache(s) in the above dialog box. Solution Explorer>Solultion TimeSeries analysis(right click)>Restore NuGet packages should run with zero errors (observe the Output>Pacakge Manger for posssible error) messages."
  },
  "articles/plot_setup.html": {
    "href": "articles/plot_setup.html",
    "title": "Setting up plots | TimeSeriesAnalysis reference documentation",
    "keywords": "Setting up plots If you have set up plotting correctly, you should be able to run the \"PlotUnitTests\" test from the Test Explorer in Visual Studio and plots should appear in a new browser window. Chrome Currently, plotting requires Chrome,and the project expects Chrome to be installed in the folder C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe . Running a local HTTP-server In Windows, if you are not already running a http-server, the easiest way to install one may be to install Internet Information Services(IIS) . This is done from Control Panel->Windows Features and selecting Internet information Services in the menu that appears (requires Administrator priveleges). If setting up a new server, it is advantageous to map the folder c:\\inetpub . Serving up the \"plotly\" folder When running a local http-server for development, you will need to add the folder \"plotly\" to it. The preferable way to to this is to add a symbolic link to the TimeSeriesAnalysis folder rather than copying files, to allow for version control. Suppose that your TimeSeriesAnalysis source code is stored in C:\\appl\\source\\TimeSeriesAnalysis , and that you are running an http-sever that is hosting the folder C:\\inetpub to your localhost . In Windows : Start a command prompt (cmd.exe) session in Windows with administrator privileges and give the following command: mklink /D c:\\inetpub\\wwwroot\\plotly C:\\appl\\source\\TimeSeriesAnalysis\\www\\plotly Linking up the \"plotly/data\" folder If your http-server is mapping \"c:\\inetpub\", then you will not need to do this step. TimeSeriesAnalysis will write data into C:\\inetpub\\plotly\\Data and it will thus be found by the javascript browser-side code and run to display your plots. If you are serving up another folder [PathXYZ] on your computer to localhost, and do not want to change this, you will have to make a symoblic link like so: mklink /D C:\\inetpub\\wwwroot\\plotly\\Data C:\\[PathXYZ]\\plotly\\Data"
  },
  "articles/unit_tests.html": {
    "href": "articles/unit_tests.html",
    "title": "Setting up and running unit tests | TimeSeriesAnalysis reference documentation",
    "keywords": "Setting up and running unit tests Note Unit tests are an important part of the documenting this class library, as they give examples of how to run the public interface of the library, and document the expected output. Thus, unit tests are worth studying even for users who do not intend to write or modify unit tests. Unit tests are implemented using NUnit 3. In Visual Studio you shoudl be able to browse the unit tests in the winow Tests>>Test Exploer . In the Test Explorer window, pressing Run All tests should cause all tests to turn green . In some cases, it may be that the tests appear greyed or or with a blue excalamation point beside them. That indicate an issue with the installation of the Nunit3TestAdapter package through nuget, which is required for integration NUnit with Visual Studio. Note If you want to submit a pull request for new functionality, writing a new a unit test is required. Note Note that some tests related to plotting are Explicit , and will need be run one-by-one. This has been done this way as this tests require manual inspection, and to avoid drowing the user in plots when re-running unit tests."
  },
  "contributing.html": {
    "href": "contributing.html",
    "title": "Contributing | TimeSeriesAnalysis reference documentation",
    "keywords": "Contributing This project welcomes contributions and suggestions. When contributing to this repository, please first discuss the change you wish to make via issue, or by the github discussions forum, or any other method with the owners of this repository before making a change. What kind of contributions? Expanding on capability of the array/matrix classes Array/Matrix/Vector classes do not contain every conceivalbe operation. If you find that the method you need is missing, addition of new methods that perform new operations are appreciated. Expaning on the (dynamic) system-identification toolset Do you have a great idea for how better to identify models for dynamic systems? If you would like to contribute your own method into the toolset, that sort of method is much appreciated Expanding on the capability of the pid-controller It will always be possible to add more functionality to the PID-controller, to accomodate different types of advanced control that it may not currently support. Benchmarking and academic comparisons If you would like to compare and benchmar other methods in this project, such as the PID-controller or system identification, that would be much appreciated (even if the other methods you tried appear to be better). For academic use, this project could be used as a reference for academics who are developing their own methods. Bugfixes Any bugs you may find, you are encouraged to report using our issue tracker, and if you can propose a fix, that is much apperciatd Pull request Proposed code changes to this project should be submitted for review as pull requests. Requirements for pull requests: pull request should only address a single feature/issue all existing tests should pass any new feature should be supported by at least one new unit tests, that both shows that the new feature works and documents how to use the new feature be available for questions of the reviewer. for complex methods such as those related to filtering, dynamic models or PID-control, unit tests should use the Plot class to plot the time-series that illustrate the test data sets used and the results of any new calculation. It is much easier to understand capability visually both for code review but also for other users."
  },
  "index.html": {
    "href": "index.html",
    "title": "TimeSeriesAnalysis .NET class library | TimeSeriesAnalysis reference documentation",
    "keywords": "TimeSeriesAnalysis .NET class library At a glance TimeSeriesAnalysis is a .NET class library for making it easy to work with time series in .NET framework (written in C# ). It handles typical tasks related to time-series analysis such as loading time-series data from CSV-files, manipulating time-series data as arrays and vectors, filtering out values by range, detecting and removing bad values fitting models to sets on time-series data(by linear regression), and plotting times-series (in a browser window). The aim of this library is to make the process of working with time series as easy as possible, and the resulting workflow should be comparable to working in Matlab , Python or R . This means that you can treat time series as vectors and matrices easily, without worrying about the arrays underneath, and perform operations like adding, subtracting, multiplying with vectors and matrices, as well as typicall pre-processing tasks like selecting subsets of a larger dataset, removing spurious values, min/max range limits etc. The result is a that tasks that you would normally do in for instance Matlab due to the perceived simplicity offered by the language, can now be accomplished in about the same amount of code in C#/.NET . So the resulting code is in many was just as simple. The benefit of doing this in C#/.NET that you get the benefits of a compiled language,prototype code is written in a lanugage suitable for implementation, (unlike Matlab scripts). That means you avoid introducing Matlab code generator toolboxes which act as complex black-boxes, and often require expensive licenses. the resulting code does not required a paid license to run, anybody can download a free copy of VS Code and re-compile the code, without requiring a working license server, a correct number of licenses or enough licenses. you can easily extend your code to for instance run in paralell using the paralell.for functionaliy freely available in .NET, wheres this functionality may require a very expensive toolbox in Matlab ( Paralell processing toolbox ). Note Originally this code has been written with control-engineering in mind, as control engineers typically prefer compiled languages such as C# for code that is to be integrated in the control system . Control systems are usually written in compiled languages in the C/C++/C# family, and the same is also true of other enterprise commercial software that deals heavily with time-series, such as dynamic simulators or condition-based monitoring systems. Plotting capabilities Plotting supports one or two subplots(stacked vertically) one or two y-axes on either subplot support for zooming in the plot, subplots x-axes are linked when zooming ability to turn trends on/off, which will cause auto-zoom to update ability to hover over trends to inspect values currently up to six trends can be plotted on a page in total(this can be increased if there is interest) The plotting leverages the javascript framework plot.ly . Some javascript extensions have been made to this toolbox to allow time-series to seemlessly be exported from your .NET code to the browser. Consider the unit-test PlotUnitTests.SubplotPositionWorksOk() : The code below is used to generate four \"vectors\", arrays of doubles, with a step change in each. public void SubplotPositionWorksOk() { double[] input2 = Vec<double>.Concat(Vec<double>.Fill(0, 20), Vec<double>.Fill(2, 20)); double[] input1 = Vec<double>.Concat(Vec<double>.Fill(0, 10), Vec<double>.Fill(1, 30)); double[] input3 = Vec<double>.Concat(Vec<double>.Fill(0, 30), Vec<double>.Fill(1, 10)); double[] input4 = Vec<double>.Concat(Vec<double>.Fill(0, 35), Vec<double>.Fill(1, 5)); string plotURL = Plot.FromList(new List<double[]>{ input1,input2,input3,input4}, new List<string>{ \"y1=input1\",\"y2=input2\",\"y3=input3\",\"y4=input4\"},1,\"unit test\", new DateTime(2020,1,1, 0,0,0), \"Test_SubplotPositionWorksOk\"); } Note Note how the Vec.Fill() an Vec.Concat() of TimeSeriesAnalysis package is used in this example to create two vectors of a given length and value and concatenate them in a single line of code. The above code generates the following interactive plot in a Chrome-window(this window pops up automatically): This plot has two subplots (one top, one buttom). Each subplot has both a left and a right axis: the top subplot has axes y1 and y2 and the bottom subplot has axes y3 and y4 . By using the top left menu, it is possible to zoom and drag the plots, and the two subplots are linked , meaning when you zoom in one of them, the x-axes of the other plot will zoom as well. Moving the cursor over each plot allows the values to be browsed by an interactive scooter . By clicking on the variable names in the legend on the top left, it is possible to disable plotting selected variables. Note Multiple plots will cause Chrome to display them in multiple tabs. A large number of figures can be generated and sorted in this way. Install instructions: in-browser time-series plotting For time-series plot to work, you will need to run a http-server locally on your machine. The plotting in this package is based on the javacsript plotting library plot.ly., a copy of the bundled minified javascript plot.ly package plotly.min.js is included for convenience, but other versions can also be downdloaded from the vendor site. The repo includes a folder \"www\\plotly\" and for plotting to work you need to run an http-server such as Internet Information Services(ISS) that in your broser serves up a folder on your computer as \"localhost\". Copy the folder plotly into the folder that for instance IIS is serveing where it can live along side other pages you may be serving up), such as \"c:\\inetpub\\plotly\" if \"c:\\inetpub\" is the folder that IIS is serving. Note that this repo includes some custom javascript code which wraps some plot.ly timeseries plotting functionality, so that a \"Plot(Var1)\" in C# can trigger a browser to open with a time-series plot of \"Var1\". Plotting works by launching a browser(chrome) and directing it to http://localhost/plotly/index.html , but all the low-level details are handled by the Plot class for you. Note You can use any http-server you like to serve up the javascript plotting files, and these files can be served from a http-server that you may already be running. Node.js for instance could be used in stead of IIS, many other alternatives exist. If you do not already run a http-server locally on your windows-machine,IIS may be easy to start with as it is bundled with your operating system. A typical use-case You may like to load data from a file into a 2D array for doubles and strings and an array of table headers using CSV.loadDataFromCSV . the dates in the array can be parsed using Array2D.GetColumnParsedAsDateTime() (useful to find data sample time, and data time span, and selecting a subset timespan for analysis) use Array2D.IndexOf() on the header array to find the indices of variables in the CSV-file, use Vec.GetColumn() or Vec.GetColumns() to load data into 1D vectors or 2D arrays use Vec.GetRowsAfterIndex() to cut off a chunk of data the data use Vec.FindValues() to find values which are nan or out-of-range which are to be ignored in regression use Matrix.Transpose() to transpose matrix before regression as needed use Vec.ReplaceIndWithValuesPrior() to replace bad values with the prior value, this makes for nicer plots. if you want to multiply, divide, add or subtract or use min, max on the arrays retreived from the csv file, use Vec.Add() , Vec.Sub (), Vec.Mult() or Vec.Div() you can do the above on rows of a 2d-matrix by using Matrix.ReplaceRow() scaling of entire 2d-matrices can be done by Matrix.Mult() Low-pass filtering on specific time-series can be done by LowPass.Filter() . to do regression, give the regressors to Vec.Regress() , along with the indices to ignore based on pre-processing, which returns the model output along with paramters and uncertainty finally, you can plot the resulting regression using Plot.FromList ."
  },
  "readme.html": {
    "href": "readme.html",
    "title": "TimeSeriesAnalysis | TimeSeriesAnalysis reference documentation",
    "keywords": "TimeSeriesAnalysis TimeSeriesAnalysis is a toolbox that allows you to work .NET efficiently with time-series that may include transients or dynamics . Why? Because the final product of many enterprise time-series applications is required to be implemented in .NET, why not try to make development as streamlined as possible? Time-series analysis it typically done in languages like Python , R or Matlab , because high-level toolboxes support time-series analysis in these languages. Tasks like loading data from a file, fitting a model to data or plotting time-series can be accomplished in a single line of code in .NET with the tools in this class library, just as you would do with one of those scripted languages. That may even mean that early research/prototyping/data analysis can start in .NET, which removes the step re-writing prototype code into .NET. But honestly, you know you can just do time-series analysis with standard statistical langauges xyz , right? Yes and no. Most of the time each data point in a time-series is considered stationary , in which case a time-series can be considered a table of independent data points, and standards statisical methods can be applied to time-series just as for any other statisical data. But in some-applications the transients or dynamics of the process are visible in trends, in which case the data points are no longer independent, and in that case many standard statistical methods become invalid. This is often the case in time-series of for instance measured temperatures, pressures or flows, and analyzing such systems often requires filtering, or fitting models that include transient/dynamic terms. Models that include dynamic terms are key in dynamic simulation, and controlling such systems by means of automatic controllers such as PID-controllers is the domain of control engineering . Fitting dynamic models to dynamic time-series is the domain of system identification , running models that include terms for transients and their interactions is the field of dynamic simulation , designing algorithms that influence the dynamics of such systems is the domain of control systems and designing algorithms which calculate unmeasured variables based on the available measurements is the topic of estimation theory . Dynamic simulators, control systems and estimators are almost exclusively implemented in the compiled languages like C/C++/C# in industry, which is what this toolbox attempts to address. Documentation: Getting started, code examples and api reference documentation TimeSeriesAnalysis reference documentation Contributing This project welcomes contributions and suggestions. Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests. Discussion forum Questions related to TimeSeriesAnalysis can be posted in the github discussion pages . Authors and contact persons Steinar Elgsæter Licence TimeSeriesAnalysis is distributed under the MIT licence ."
  }
}